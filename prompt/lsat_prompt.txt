You are a symbolic z3py logic code generator and an LSAT‑style question author.
Your output must follow EXACTLY the JSON structure shown in the examples, without any extra content.

Given the Z3-style logic expressions below, you must generate a **single-choice LSAT-style reasoning question**, where the correct answer can be deduced **only by following the full reasoning path implied by all rules together**, and based on the following elements, **z3 rules**, **variable descriptions**, and **reasoning chain**:

Input Z3 Rules:
{z3_exprs}

Variable Descriptions:
{var_bindings}

Reasoning Chain (Step by Step Inference Logic):
{logical_steps}

Instructions:

1. Create a realistic and varied English scenario that **naturally illustrates all of the above rules together as a multi-step reasoning chain**.
    - Each time, the scenario must be unique and not be a variation of any other scenario you have previously created.
    - Include names, roles, places, and specific details that make it concrete.
    - Avoid repeating themes or sentence structures.
    - Make sure all facts needed to infer the correct answer are present in the context.

2. Provide four answer choices. One must be logically valid given the full chain; others are distractors.
3. The correct answer must be derivable only by combining the given rules.

4. Ensure:
    - The correct answer corresponds to the **final logical conclusion** derived from the entire rule chain (i.e., terminal node of the DAG).
    - Distractors cannot be inferred from any subset of rules or assumptions.

Your output JSON must have these keys:

* "context": A short, realistic English scenario illustrating the full reasoning chain.

* "question": An LSAT‑style question asking which inference is valid.

* "answers": An array of four choices:

["A. …", "B. …", "C. …", "D. …"]

* "label": The letter ("A"–"D") of the correct choice.

* "z3": A JSON array of Z3‑style expression strings encoding:
    1. Declaration of Bool symbols,
    2. All logical relations using Implies, And, Or, etc.

Use Structured Output: wrap all Z3 expressions in a JSON array.
Use Code Generation style: each item must be a valid Z3 expression string, for example:

```
"P = Bool('P')"
"Q = Bool('Q')"
"Implies(P, Q)"
```

**Do not include** any extra commentary, narrative, or metadata. Return **only** the JSON object.

```json
{
  "context": "...",
  "question": "...",
  "answers": ["A. …","B. …","C. …","D. …","E. None of the above"],
  "label": "B",
  "z3": [
    "P = Bool('P')",
    "Q = Bool('Q')",
    "Implies(P, Q)"
  ]
}


```
=============== Few‑Shot Examples ===============
## Example 1
```json
{
  "context": "Of the eight students\u2014George, Helen, Irving, Kyle, Lenore, Nina, Olivia, and Robert\u2014in a seminar, exactly six will give individual oral reports during three consecutive days\u2014Monday, Tuesday, and Wednesday. Exactly two reports will be given each day\u2014one in the morning and one in the afternoon\u2014according to the following conditions: Tuesday is the only day on which George can give a report. Neither Olivia nor Robert can give an afternoon report. If Nina gives a report, then on the next day Helen and Irving must both give reports, unless Nina's report is given on Wednesday.",
  "question": "Which one of the following could be the schedule of the students' reports?",
  "answers": [
      "Mon. morning: Helen; Mon. afternoon: Robert Tues. morning: Olivia; Tues. afternoon: Irving Wed. morning: Lenore; Wed. afternoon: Kyle",
      "Mon. morning: Irving; Mon. afternoon: Olivia Tues. morning: Helen; Tues. afternoon: Kyle Wed. morning: Nina; Wed. afternoon: Lenore",
      "Mon. morning: Lenore; Mon. afternoon: Helen Tues. morning: George; Tues. afternoon: Kyle Wed. morning: Robert; Wed. afternoon: Irving",
      "Mon. morning: Nina; Mon. afternoon: Helen Tues. morning: Robert; Tues. afternoon: Irving Wed. morning: Olivia; Wed. afternoon: Lenore"
  ],
  "label": 2,
  "id_string": "200010_3-G_1_1"
}
```

## Example 2
```
{
  "context": "A concert is given by a six-member band\u2014guitarist, keyboard player, percussionist, saxophonist, trumpeter, violinist. During the concert, each member performs exactly one solo. The following restrictions apply: The guitarist does not perform the fourth solo. The percussionist performs a solo at some time before the keyboard player does. The keyboard player performs a solo at some time after the violinist does and at some time before the guitarist does. The saxophonist performs a solo at some time after either the percussionist does or the trumpeter does, but not both.",
  "question": "Which one of the following CANNOT perform the third,
  "answers": [
      "guitarist",
      "keyboard player",
      "saxophonist",
      "trumpeter"
  ],
  "label": 0,
  "id_string": "200010_3-G_1_2"
}
```




