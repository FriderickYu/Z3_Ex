OK，经过阅读了FLD，FLDx2，PRONTOQA-OOD三篇论文，我打算结合三篇论文的特点和我的思路写一个论文，首先你需要根据我的思路细化我的idea，提出优化建议并对我idea错误的部分进行纠错

我打算使用z3表达式来构建一个用于评估/微调大模型推理的一个自然语言合成数据集，因为z3包含的逻辑更广，相比较FLD，FLDx2，PRONTOQA-OOD等论文，z3不仅仅包含一阶逻辑，还包含例如算术、比较、赋值等等复杂逻辑。
而且z3不同于前向推理，是在一些约束条件下进行判断，这个我觉得据此生成的数据集逻辑更加的复杂。
构建的合成数据集要具有以下特点：
1. 强逻辑泛化 + 实用推理提升
2. 逻辑规则集要复杂，扩展到超过60个规则（含公理 + 代表性定理）
3. 逻辑步骤数量要多，1~10步
4. 要有distractor模块
5. 文本样本的表达多样性强，表达模板结构更深，组合方式更多
6. 词汇空间要丰富，构造内容要非常的随机，要远离语义模式，可以利用现存的一些词典；这样给大模型进行推理时可以让大模型脱离常识和背景知识，只调用逻辑推理能力来进行推理

设计原则如下：
DP1. 引入未知事实，推理必须从非记忆中抽象演绎，用极大词表构造命题（如 Jaz/Foo 星球/WordNet全集），打破知识快捷通道
DP2. 引入否定推理（负样本），强制 LLM 学会识别无效推理，加 “前提不充分不能推出结论” 类型样本
DP3. 多样推理规则，不同规则组合形成不同推理链，用多步逻辑规则（逻辑规则库）
DP4. 多样语言表达，多样化自然语言结构以避免模式记忆，设计更复杂嵌套模板，如：“If A, then B”, “A leads to B”, “The presence of A implies B” 等进行文字替代
DP5. 引入复杂的distractor，尤其是对抗性distractor
DP6. 引入多步推理，每一步都要有逻辑，不能出现跳跃推理
DP7. 使用prompt+LLM将类z3表达式转化成自然语言
DP8. 自动样本验证，所有样本都可以用z3反向验证，生成的类z3表达式可以直接转换成z3py程序方便运行，以判断数据集的生成是否正确

数据集的样例如下

{
    "context": "xxx",
    "question": "xxx",
    "answers": [
        "xxx",
        "xxx",
        "xxx",
        "xxx",
        "xxx"
    ],
    "logical_steps": [
        "xxx",
        "xxx",
        "xxx",
        "xxx",
        "xxx"
    ],
    "label": 2,
    "id": "xxx"
}

context: 给定的前提集合
question: 给定的推理问题
logical_steps:从context推导出的推理步骤，一个列表，列表元素按照推理顺序排列
answers: 根据context+question衍生的答案列表，一共有四个，正确（SAT）有一个，错误的（UNSAT）有三个，不要出现unknown的情况
label: 答案列表中正确答案的索引
id: 生成的数据集id，主键索引，唯一

首先，你需要基于z3py构建一个逻辑规则库，要求包含且不限于以下的逻辑

1. 命题组合逻辑：包含分配律、交换律、吸收率等
2. 反推逻辑：逆、逆否、归谬式等
3. 蕴含链结构：三段论、间接推理链等等
4. 量词逻辑：实例化、引入、否定谓词等等
5. 赋值表达：布尔表达式、函数合成等等
6. 算术逻辑：加减乘除、比较大小等等
7. 自定义结构：例如定义性推理等等
8. 一些命题逻辑恒真式，具体如下

命题逻辑恒真式（Propositional Logic Axioms）

1.  P → (Q → P)
2.  (P → (Q → R)) → ((P → Q) → (P → R))
3.  P ∧ Q → P
4.  P ∧ Q → Q
5.  P → (P ∨ Q)
6.  Q → (P ∨ Q)
7.  (P → R) → ((Q → R) → ((P ∨ Q) → R))
8.  ¬¬P → P
9.  (P → Q) → ((P → ¬Q) → ¬P)
10. ¬P → (P → Q)      # 爆炸律 / ex falso quodlibet

等价恒真式（Equivalence Tautologies）

11. ¬(P ∧ Q) ≡ ¬P ∨ ¬Q          # De Morgan 定律（合取）
12. ¬(P ∨ Q) ≡ ¬P ∧ ¬Q          # De Morgan 定律（析取）
13. P ↔ Q ≡ (P → Q) ∧ (Q → P)   # 双向蕴涵展开
14. ¬(¬P) ≡ P                  # 双重否定律
15. P ∨ Q ≡ Q ∨ P              # 析取交换律
16. P ∧ Q ≡ Q ∧ P              # 合取交换律
17. P ∨ (Q ∨ R) ≡ (P ∨ Q) ∨ R  # 析取结合律
18. P ∧ (Q ∧ R) ≡ (P ∧ Q) ∧ R  # 合取结合律

常用形式推理式（Derived Reasoning Forms）

19. P → Q ≡ ¬P ∨ Q             # 蕴涵等价形式
20. P ∧ (P → Q) → Q            # 推理规则形式（modus ponens）

谓词逻辑恒真式（First-order Logic Axioms）

21. ∀x P(x) → P(c)                      # 全称实例化（Universal Instantiation）
22. P(c) → ∃x P(x)                      # 存在引入（Existential Generalization）
23. ∀x (P(x) → Q(x)) → (∀x P(x) → ∀x Q(x))  # 全称量词分配律

可选（类 Hilbert 系统构造公理）

24. A → (B → A)
25. (A → B) → ((A → (B → C)) → (A → C))
26. A ∧ B → A
27. A ∧ B → B
28. A → (B → A ∧ B)

这个逻辑规则库是整个项目的基石，后续还要在这上面不断迭代

其次，我需要一个推理链生成器，思路类似于大模型CoT的思考过程，但是不是CoT，类似于做逻辑推理时的实际推理步骤，表明推理每一步之间的因果依赖关系，模拟复杂链式的思维过程。因为一切的推论都是从一组基本公理（axioms）出发，通过推理规则逐步构造出复杂结论的过程。
可以考虑显式建模成一个DAG

再有，需要一个distractor生成策略，尤其是使用z3的特有优势：
1. 结构扰动：交换 / 替换公式内变量或谓词
2. 符号误导：构造在形式上相似但不可导的命题
3. 控制可导性：通过 solver.check() 精确判断“不可推出”
4. 每个样本生成完成后，会随机选择 1~3 条 distractor
5. 与真实前提混合加入 context 中（无特定标记）
6. Distractor 建议记录 source、扰动策略、是否误导成功等 metadata，便于控制难度

这中间可能会出现一些问题
1. z3 只输出一个模型 → 不利于生成多个选项：建议通过“blocking clause”采样多个解，构造 4 选项 QA
2. Distractor 质量控制：除了逻辑不可导，还需构造“高度相似”的语言表达，建议加入 LLM 判断“相似但不等价”评分
3. 算术逻辑表达自然语言复杂：比如 “x > 2 ∧ x < 5 → y = x + 3”，建议构造伪实体如 “block weight > medium” 来包装表达
4. 多步推理链中避免 “结论跳跃”：建议在每步后都用 Z3 验证该 step 是可推出的，保证链条每步有效
