1. https://arxiv.org/abs/2305.12295 LOGIC-LM: Empowering Large Language Models with Symbolic Solvers for Faithful Logical Reasoning
2. https://arxiv.org/abs/2411.12498 Enhancing Reasoning Capabilities of LLMs via Principled Synthetic Logic Corpus
3. https://arxiv.org/abs/2308.07336 Learning Deductive Reasoning from Synthetic Corpus based on Formal Logic
4. https://arxiv.org/abs/2305.15269 Testing the General Deductive Reasoning Capacity of Large Language Models Using OOD Examples

我打算以以上四篇论文为基础，再结合我的思路，给我的idea进行细化和代码框架的撰写
我打算使用z3表达式来构建一个用于评估/微调大模型推理的一个自然语言合成数据集，因为z3包含的逻辑更广，相比于上四篇论文，z3不仅仅包含一阶逻辑，还包含例如算术、比较、赋值等等复杂逻辑。
而且z3不同于前向推理，是在一些约束条件下进行判断，这个我觉得据此生成的数据集逻辑更加的复杂。
构建的合成数据集要具有以下特点：
1. 强逻辑泛化 + 实用推理提升
2. 逻辑规则集要复杂，扩展到超过60个规则（含公理 + 代表性定理）
3. 逻辑步骤数量要多，1~10步
4. 要有distractor模块
5. 文本样本的表达多样性强，表达模板结构更深，组合方式更多
6. 词汇空间要丰富，构造内容要非常的随机，要远离语义模式，可以利用现存的一些词典；这样给大模型进行推理时可以让大模型脱离常识和背景知识，只调用逻辑推理能力来进行推理
7. 使用Prompt Engineering + LLM, 基于之前构建的逻辑规则集，将z3规则，类z3表达式（例如Car_X_Speed = Int('Car_X_Speed'), Car_Y_Speed = Int('Car_Y_Speed')）转化成实际的自然语言 -> The speed of car {A}


设计原则如下：
DP1. 引入未知事实，推理必须从非记忆中抽象演绎，用极大词表构造命题（如 Jaz/Foo 星球/WordNet全集），打破知识快捷通道
DP2. 引入否定推理（负样本），强制 LLM 学会识别无效推理，加 “前提不充分不能推出结论” 类型样本
DP3. 多样推理规则，不同规则组合形成不同推理链，用多步逻辑规则（逻辑规则库）
DP4. 多样语言表达，多样化自然语言结构以避免模式记忆，设计更复杂嵌套模板，如：“If A, then B”, “A leads to B”, “The presence of A implies B” 等进行文字替代
DP5. 引入复杂的distractor，尤其是对抗性distractor
DP6. 引入多步推理，每一步都要有逻辑，不能出现跳跃推理
DP7. 使用prompt+LLM将类z3表达式转化成自然语言
DP8. 自动样本验证，所有样本都可以用z3反向验证，生成的类z3表达式可以直接转换成z3py程序方便运行，以判断数据集的生成是否正确

数据集的样例如下

{
    "context": "xxx",
    "question": "xxx",
    "answers": [
        "xxx",
        "xxx",
        "xxx",
        "xxx",
        "xxx"
    ],
    "logical_steps": [
        "xxx",
        "xxx",
        "xxx",
        "xxx",
        "xxx"
    ],
    "label": 2,
    "id": "xxx"
}

context: 给定的前提集合
question: 给定的推理问题
logical_steps:从context推导出的推理步骤，一个列表，列表元素按照推理顺序排列
answers: 根据context+question衍生的答案列表，一共有四个，正确（SAT）有一个，错误的（UNSAT）有三个，不要出现unknown的情况
label: 答案列表中正确答案的索引
id: 生成的数据集id，主键索引，唯一

整个idea的流程如图所示

请你对这个idea进行细化和反复钻研，要仔细阅读我给你的几篇论文，并结合我的流程图和idea，并给出代码框架